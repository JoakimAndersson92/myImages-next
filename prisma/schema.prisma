generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model images {
  id       Int    @id @default(autoincrement())
  filename String @db.VarChar(255)
  category String @db.VarChar(255)
}

model photographer {
  personID  Int               @id @unique @default(autoincrement())
  user      String            @unique @default("") @db.VarChar(255)
  firstName String            @default("") @db.VarChar(255)
  lastName  String            @default("") @db.VarChar(255)
  email     String            @unique @default("") @db.VarChar(255)
  password  String            @default("") @db.VarChar(255)
  role      String            @default("user")
  info      photographerinfo?
  photos    photos[]
}

model photographerinfo {
  personID        Int          @id @unique(map: "photographerInfo_personID_key") @default(autoincrement())
  country         String?      @db.VarChar(255)
  city            String?      @db.VarChar(255)
  about           String?      @db.VarChar(255)
  camera          String?      @db.VarChar(255)
  lens            String?      @db.VarChar(255)
  favoritePhoto   String?      @db.VarChar(255)
  photoPreference String?      @db.VarChar(255)
  careerStart     String?      @db.VarChar(255)
  photographer    photographer @relation(fields: [personID], references: [personID])
}

model photos {
  id              Int          @id @default(autoincrement())
  personID        Int
  title           String?
  description     String?
  filename        String
  filetype        String
  filesize        Int
  url             String       @db.VarChar(250)
  urlUser         String       @db.VarChar(250)
  thumbnailUrl    String?
  dateTaken       DateTime?
  width           Int?
  height          Int?
  tags            Json?
  category        String?
  countViewd      Int?
  countDownloaded Int?
  price           Int?         @default(100)
  privacy         Boolean      @default(true)
  photographer    photographer @relation(fields: [personID], references: [personID])
  collection      collection?  @relation(fields: [collectionId], references: [id])
  collectionId    Int?
  categories      categories?  @relation(fields: [categoriesId], references: [id])
  categoriesId    Int?
}

model cart {
  id           String @id @default(cuid())
  photoID      Int
  sessionEmail String
}

model receipt {
  id           String @id
  photosID     String
  sessionEmail String
  dateAdded    String
  price        Int
}

model categories {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  photos      photos[]
}

model collection {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  parentId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  photos      photos[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
